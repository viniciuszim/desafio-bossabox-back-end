swagger: "2.0"
info:
  description: "This is a sample server to [desafio-bossabox-back-end](https://github.com/viniciuszim/desafio-bossabox-back-end). <br/><br/>For this sample, you need to use a valide `token` to test the authorization filters. <br/><br/>To get the token, please run <strong>/sessions</strong> using: <br/><strong>email:</strong> admin@company.com<br/><strong>password:</strong> 123456 <br/><br/>After get the token, go to `Authorize` and fill the value with: `Bearer <token>`"
  version: "1.0.0"
  title: "Desafio Backend Bossabox"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "vinicius.miguel@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3000"
basePath: "/"
tags:
- name: "session"
  description: "Operations about login/logout"
- name: "tool"
  description: "Operations about tools"
- name: "user"
  description: "Operations about users"
schemes:
- "http"
paths:
  /sessions:
    post:
      tags:
      - "session"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Log in the user"
        required: true
        schema:
          $ref: "#/definitions/Session"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/SessionReturn"
        400:
          description: "Invalid username/password supplied"
  /tools:
    get:
      tags:
      - "tool"
      summary: "Get all tools"
      description: "This can only be done by the logged in user."
      operationId: "getTools"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Tool"
        401:
          description: "Token invalid"
      security:
        - Bearer: []
    post:
      tags:
      - "tool"
      summary: "Create tool"
      description: "This can only be done by the logged in user."
      operationId: "createTool"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created tool object"
        required: true
        schema:
          $ref: "#/definitions/Tool"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Tool"
        401:
          description: "Token invalid"
      security:
        - Bearer: []
  /tool/{id}:
    get:
      tags:
      - "tool"
      summary: "Find tool by ID"
      description: "Returns a single tool"
      operationId: "getToolById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of tool to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Tool"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Tool not found"
        401:
          description: "Token invalid"
      security:
        - Bearer: []
    put:
      tags:
      - "tool"
      summary: "Updated a tool"
      description: "This can only be done by the logged in user."
      operationId: "updateTool"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of tool to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated tool object"
        required: true
        schema:
          $ref: "#/definitions/Tool"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Tool"
        400:
          description: "Invalid user supplied"
        404:
          description: "Tool not found"
        401:
          description: "Token invalid"
      security:
        - Bearer: []
    delete:
      tags:
      - "tool"
      summary: "Delete a tool"
      description: "This can only be done by the logged in user."
      operationId: "deleteTool"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of tool to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
        404:
          description: "Tool not found"
        401:
          description: "Token invalid"
      security:
        - Bearer: []
  /users:
    get:
      tags:
      - "user"
      summary: "Get all users"
      description: "This can only be done by the logged in user."
      operationId: "getUsers"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        401:
          description: "Token invalid"
      security:
        - Bearer: []
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        401:
          description: "Token invalid"
      security:
        - Bearer: []
  /user/{id}:
    get:
      tags:
      - "user"
      summary: "Find user by ID"
      description: "Returns a single user"
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
        401:
          description: "Token invalid"
      security:
        - Bearer: []
    put:
      tags:
      - "user"
      summary: "Updated a user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of user to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
        401:
          description: "Token invalid"
      security:
        - Bearer: []
    delete:
      tags:
      - "user"
      summary: "Delete a user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of user to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
        404:
          description: "User not found"
        401:
          description: "Token invalid"
      security:
        - Bearer: []
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  Session:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
  SessionReturn:
    type: "object"
    properties:
      user:
        $ref: "#/definitions/User"
      token:
        type: "string"
  Tool:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      description:
        type: "string"
      tags:
        type: "string"
      user:
        $ref: "#/definitions/User"
      createdAt:
        type: "string"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      createdAt:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"